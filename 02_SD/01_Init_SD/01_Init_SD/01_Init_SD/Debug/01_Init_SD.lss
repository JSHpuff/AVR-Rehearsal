
01_Init_SD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  000003d0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001325  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a8  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071c  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058a  00000000  00000000  0000317b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3e       	cpi	r26, 0xE8	; 232
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ee       	ldi	r26, 0xE8	; 232
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3e       	cpi	r26, 0xE8	; 232
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 01 	call	0x39e	; 0x39e <main>
  9e:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_transfer>:
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	return RES_OK;
}
  a6:	8e bd       	out	0x2e, r24	; 46
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <spi_transfer+0x2>
  ae:	8d b5       	in	r24, 0x2d	; 45
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8d bd       	out	0x2d, r24	; 45
  b4:	08 95       	ret

000000b6 <spi_receive_raw>:
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8e bd       	out	0x2e, r24	; 46
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <spi_receive_raw+0x4>
  c0:	8d b5       	in	r24, 0x2d	; 45
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	8d bd       	out	0x2d, r24	; 45
  c6:	8e b5       	in	r24, 0x2e	; 46
  c8:	08 95       	ret

000000ca <sd_send_cmd>:
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	c8 2f       	mov	r28, r24
  d8:	14 2f       	mov	r17, r20
  da:	05 2f       	mov	r16, r21
  dc:	f6 2e       	mov	r15, r22
  de:	e7 2e       	mov	r14, r23
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
  e4:	8c 2f       	mov	r24, r28
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  ec:	8e 2d       	mov	r24, r14
  ee:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  f2:	8f 2d       	mov	r24, r15
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  f8:	80 2f       	mov	r24, r16
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  fe:	81 2f       	mov	r24, r17
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 104:	cc 23       	and	r28, r28
 106:	19 f0       	breq	.+6      	; 0x10e <sd_send_cmd+0x44>
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	29 f0       	breq	.+10     	; 0x116 <sd_send_cmd+0x4c>
 10c:	08 c0       	rjmp	.+16     	; 0x11e <sd_send_cmd+0x54>
 10e:	85 e9       	ldi	r24, 0x95	; 149
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 114:	07 c0       	rjmp	.+14     	; 0x124 <sd_send_cmd+0x5a>
 116:	87 e8       	ldi	r24, 0x87	; 135
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 11c:	03 c0       	rjmp	.+6      	; 0x124 <sd_send_cmd+0x5a>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	06 c0       	rjmp	.+12     	; 0x134 <sd_send_cmd+0x6a>
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
 12c:	d8 2f       	mov	r29, r24
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	19 f4       	brne	.+6      	; 0x138 <sd_send_cmd+0x6e>
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	ca 30       	cpi	r28, 0x0A	; 10
 136:	c0 f3       	brcs	.-16     	; 0x128 <sd_send_cmd+0x5e>
 138:	8d 2f       	mov	r24, r29
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	ff 90       	pop	r15
 144:	ef 90       	pop	r14
 146:	08 95       	ret

00000148 <spi_init>:
 148:	84 b1       	in	r24, 0x04	; 4
 14a:	8c 62       	ori	r24, 0x2C	; 44
 14c:	84 b9       	out	0x04, r24	; 4
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	84 b9       	out	0x04, r24	; 4
 154:	85 b1       	in	r24, 0x05	; 5
 156:	84 60       	ori	r24, 0x04	; 4
 158:	85 b9       	out	0x05, r24	; 5
 15a:	83 e5       	ldi	r24, 0x53	; 83
 15c:	8c bd       	out	0x2c, r24	; 44
 15e:	8d b5       	in	r24, 0x2d	; 45
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	8d bd       	out	0x2d, r24	; 45
 164:	08 95       	ret

00000166 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <disk_initialize+0xe>
 174:	00 d0       	rcall	.+0      	; 0x176 <disk_initialize+0x10>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	if (pdrv != 0) return STA_NOINIT;
 17a:	81 11       	cpse	r24, r1
 17c:	eb c0       	rjmp	.+470    	; 0x354 <disk_initialize+0x1ee>

	spi_init();
 17e:	0e 94 a4 00 	call	0x148	; 0x148 <spi_init>
	CS_HIGH();											// make sure card is deselected
 182:	85 b1       	in	r24, 0x05	; 5
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e9       	ldi	r24, 0x9F	; 159
 18a:	9f e0       	ldi	r25, 0x0F	; 15
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <disk_initialize+0x26>
 190:	00 c0       	rjmp	.+0      	; 0x192 <disk_initialize+0x2c>
 192:	00 00       	nop
	_delay_ms(1);										// give SD card time to power up
	for(uint8_t i = 0; i < 10; i++) spi_receive_raw();	// wait 80 clock cycles to synchronize
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	03 c0       	rjmp	.+6      	; 0x19e <disk_initialize+0x38>
 198:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	1a 30       	cpi	r17, 0x0A	; 10
 1a0:	d8 f3       	brcs	.-10     	; 0x198 <disk_initialize+0x32>

	// Send CMD0 to reset SD card
	CS_LOW();
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	85 b9       	out	0x05, r24	; 5
	uint8_t response;
	for(uint16_t i = 0; ; ++i) {
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
		response = sd_send_cmd(CMD_GO_IDLE_STATE, 0);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
		if(response == 0x01) {
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <disk_initialize+0x70>
			break;
		}
		if(i == 0x1ff) {
 1bc:	0f 3f       	cpi	r16, 0xFF	; 255
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	19 07       	cpc	r17, r25
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <disk_initialize+0x6a>
			response = 0;
			USART_putstring("SPI working, but no SD response to CMD0.\n\r");
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
			return STA_NOINIT;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	c3 c0       	rjmp	.+390    	; 0x356 <disk_initialize+0x1f0>
	for(uint8_t i = 0; i < 10; i++) spi_receive_raw();	// wait 80 clock cycles to synchronize

	// Send CMD0 to reset SD card
	CS_LOW();
	uint8_t response;
	for(uint16_t i = 0; ; ++i) {
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i == 0x1ff) {
			response = 0;
			USART_putstring("SPI working, but no SD response to CMD0.\n\r");
			return STA_NOINIT;
		}
	}
 1d4:	eb cf       	rjmp	.-42     	; 0x1ac <disk_initialize+0x46>
	CS_HIGH();
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	85 b9       	out	0x05, r24	; 5
	spi_receive_raw();
 1dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>

	/* check for version of SD card specification */
	CS_LOW();
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	85 b9       	out	0x05, r24	; 5
	response = sd_send_cmd(CMD_SEND_IF_COND, 0x1AA);
 1e6:	4a ea       	ldi	r20, 0xAA	; 170
 1e8:	51 e0       	ldi	r21, 0x01	; 1
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
	uint8_t is_v2 = 0;
	if (response == 0x01) {
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	19 f5       	brne	.+70     	; 0x23e <disk_initialize+0xd8>
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <disk_initialize+0xae>
		uint8_t r7[4];
		for (uint8_t i = 0; i < 4; i++) r7[i] = spi_receive_raw();
 1fa:	e1 2e       	mov	r14, r17
 1fc:	f1 2c       	mov	r15, r1
 1fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
 202:	e1 e0       	ldi	r30, 0x01	; 1
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	ee 0d       	add	r30, r14
 20c:	ff 1d       	adc	r31, r15
 20e:	80 83       	st	Z, r24
 210:	1f 5f       	subi	r17, 0xFF	; 255
 212:	01 c0       	rjmp	.+2      	; 0x216 <disk_initialize+0xb0>
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	14 30       	cpi	r17, 0x04	; 4
 218:	80 f3       	brcs	.-32     	; 0x1fa <disk_initialize+0x94>
		if ((r7[2] & 0x01) && r7[3] == 0xAA) {
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	80 ff       	sbrs	r24, 0
 21e:	06 c0       	rjmp	.+12     	; 0x22c <disk_initialize+0xc6>
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	8a 3a       	cpi	r24, 0xAA	; 170
 224:	19 f4       	brne	.+6      	; 0x22c <disk_initialize+0xc6>
				is_v2 = 1;
 226:	ee 24       	eor	r14, r14
 228:	e3 94       	inc	r14
 22a:	0e c0       	rjmp	.+28     	; 0x248 <disk_initialize+0xe2>
			} else {
				USART_putstring("CMD8: invalid voltage/test pattern.\n\r");
 22c:	8b e2       	ldi	r24, 0x2B	; 43
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
				CS_HIGH(); 
 234:	85 b1       	in	r24, 0x05	; 5
 236:	84 60       	ori	r24, 0x04	; 4
 238:	85 b9       	out	0x05, r24	; 5
				return STA_NOINIT;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	8c c0       	rjmp	.+280    	; 0x356 <disk_initialize+0x1f0>
			}
	} else {
		USART_putstring("Older SD card.\n\r");
 23e:	81 e5       	ldi	r24, 0x51	; 81
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
	spi_receive_raw();

	/* check for version of SD card specification */
	CS_LOW();
	response = sd_send_cmd(CMD_SEND_IF_COND, 0x1AA);
	uint8_t is_v2 = 0;
 246:	e1 2c       	mov	r14, r1
				return STA_NOINIT;
			}
	} else {
		USART_putstring("Older SD card.\n\r");
	}
	CS_HIGH();
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	85 b9       	out	0x05, r24	; 5
	spi_receive_raw();
 24e:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>

	// ACMD41 loop
	for (uint16_t retry = 0; retry < 1000; retry++) {
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	30 c0       	rjmp	.+96     	; 0x2b8 <disk_initialize+0x152>
		CS_LOW();
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	85 b9       	out	0x05, r24	; 5
		sd_send_cmd(CMD_APP, 0);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	ba 01       	movw	r22, r20
 264:	87 e3       	ldi	r24, 0x37	; 55
 266:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
		response = sd_send_cmd(CMD_SD_SEND_OP_COND, is_v2 ? 0x40000000 : 0);
 26a:	ee 20       	and	r14, r14
 26c:	29 f0       	breq	.+10     	; 0x278 <disk_initialize+0x112>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e4       	ldi	r23, 0x40	; 64
 276:	03 c0       	rjmp	.+6      	; 0x27e <disk_initialize+0x118>
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	ba 01       	movw	r22, r20
 27e:	89 e2       	ldi	r24, 0x29	; 41
 280:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
 284:	f8 2e       	mov	r15, r24
		CS_HIGH(); spi_receive_raw();
 286:	85 b1       	in	r24, 0x05	; 5
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
		if (response == 0x00) break;
 290:	ff 20       	and	r15, r15
 292:	b1 f0       	breq	.+44     	; 0x2c0 <disk_initialize+0x15a>
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	9c e9       	ldi	r25, 0x9C	; 156
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <disk_initialize+0x132>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <disk_initialize+0x138>
 29e:	00 00       	nop
		_delay_ms(10);
		if (retry == 999) {
 2a0:	07 3e       	cpi	r16, 0xE7	; 231
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	19 07       	cpc	r17, r25
 2a6:	31 f4       	brne	.+12     	; 0x2b4 <disk_initialize+0x14e>
			USART_putstring("ACMD41 failed.\n\r");
 2a8:	82 e6       	ldi	r24, 0x62	; 98
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
			return STA_NOINIT;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	51 c0       	rjmp	.+162    	; 0x356 <disk_initialize+0x1f0>
	}
	CS_HIGH();
	spi_receive_raw();

	// ACMD41 loop
	for (uint16_t retry = 0; retry < 1000; retry++) {
 2b4:	0f 5f       	subi	r16, 0xFF	; 255
 2b6:	1f 4f       	sbci	r17, 0xFF	; 255
 2b8:	08 3e       	cpi	r16, 0xE8	; 232
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	18 07       	cpc	r17, r24
 2be:	60 f2       	brcs	.-104    	; 0x258 <disk_initialize+0xf2>
		}
	}

	// CMD58: Read OCR
	uint8_t is_sdhc = 0;
	CS_LOW();
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	8b 7f       	andi	r24, 0xFB	; 251
 2c4:	85 b9       	out	0x05, r24	; 5
	response = sd_send_cmd(CMD_READ_OCR, 0);
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	ba 01       	movw	r22, r20
 2cc:	8a e3       	ldi	r24, 0x3A	; 58
 2ce:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
	if (response == 0x00) {
 2d2:	88 23       	and	r24, r24
 2d4:	79 f0       	breq	.+30     	; 0x2f4 <disk_initialize+0x18e>
			return STA_NOINIT;
		}
	}

	// CMD58: Read OCR
	uint8_t is_sdhc = 0;
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	16 c0       	rjmp	.+44     	; 0x306 <disk_initialize+0x1a0>
	CS_LOW();
	response = sd_send_cmd(CMD_READ_OCR, 0);
	if (response == 0x00) {
		uint8_t ocr[4];
		for (uint8_t i = 0; i < 4; i++) ocr[i] = spi_receive_raw();
 2da:	e1 2e       	mov	r14, r17
 2dc:	f1 2c       	mov	r15, r1
 2de:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
 2e2:	e1 e0       	ldi	r30, 0x01	; 1
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	ec 0f       	add	r30, r28
 2e8:	fd 1f       	adc	r31, r29
 2ea:	ee 0d       	add	r30, r14
 2ec:	ff 1d       	adc	r31, r15
 2ee:	80 83       	st	Z, r24
 2f0:	1f 5f       	subi	r17, 0xFF	; 255
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <disk_initialize+0x190>
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	14 30       	cpi	r17, 0x04	; 4
 2f8:	80 f3       	brcs	.-32     	; 0x2da <disk_initialize+0x174>
		if (ocr[0] & 0x40) is_sdhc = 1;
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	86 fd       	sbrc	r24, 6
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <disk_initialize+0x19e>
			return STA_NOINIT;
		}
	}

	// CMD58: Read OCR
	uint8_t is_sdhc = 0;
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	01 c0       	rjmp	.+2      	; 0x306 <disk_initialize+0x1a0>
	CS_LOW();
	response = sd_send_cmd(CMD_READ_OCR, 0);
	if (response == 0x00) {
		uint8_t ocr[4];
		for (uint8_t i = 0; i < 4; i++) ocr[i] = spi_receive_raw();
		if (ocr[0] & 0x40) is_sdhc = 1;
 304:	11 e0       	ldi	r17, 0x01	; 1
	}
	CS_HIGH(); 
 306:	85 b1       	in	r24, 0x05	; 5
 308:	84 60       	ori	r24, 0x04	; 4
 30a:	85 b9       	out	0x05, r24	; 5
	spi_receive_raw();
 30c:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>

	// CMD16: Set block length
	if (!is_sdhc) {
 310:	11 11       	cpse	r17, r1
 312:	18 c0       	rjmp	.+48     	; 0x344 <disk_initialize+0x1de>
		CS_LOW();
 314:	85 b1       	in	r24, 0x05	; 5
 316:	8b 7f       	andi	r24, 0xFB	; 251
 318:	85 b9       	out	0x05, r24	; 5
		response = sd_send_cmd(CMD_SET_BLOCKLEN, 512);
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	52 e0       	ldi	r21, 0x02	; 2
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e1       	ldi	r24, 0x10	; 16
 324:	0e 94 65 00 	call	0xca	; 0xca <sd_send_cmd>
 328:	18 2f       	mov	r17, r24
		CS_HIGH(); spi_receive_raw();
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	85 b9       	out	0x05, r24	; 5
 330:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_receive_raw>
		if (response != 0x00) {
 334:	11 23       	and	r17, r17
 336:	31 f0       	breq	.+12     	; 0x344 <disk_initialize+0x1de>
			USART_putstring("CMD16 failed.\n\r");
 338:	83 e7       	ldi	r24, 0x73	; 115
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
			return STA_NOINIT;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	09 c0       	rjmp	.+18     	; 0x356 <disk_initialize+0x1f0>
		}
	}

	// Enable high-speed SPI
	SPCR &= ~((1 << SPR1) | (1 << SPR0));
 344:	8c b5       	in	r24, 0x2c	; 44
 346:	8c 7f       	andi	r24, 0xFC	; 252
 348:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
 34a:	8d b5       	in	r24, 0x2d	; 45
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	8d bd       	out	0x2d, r24	; 45

	return 0;  // Success
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	01 c0       	rjmp	.+2      	; 0x356 <disk_initialize+0x1f0>

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	if (pdrv != 0) return STA_NOINIT;
 354:	81 e0       	ldi	r24, 0x01	; 1
	// Enable high-speed SPI
	SPCR &= ~((1 << SPR1) | (1 << SPR0));
	SPSR |= (1 << SPI2X);

	return 0;  // Success
}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	08 95       	ret

0000036c <uart_init>:
FIL file;
DIR dir;
FILINFO fno;

void uart_init(void) {
	UBRR0H = (unsigned char) (ubrr - 1)>>8;
 36c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (ubrr - 1);
 370:	87 e6       	ldi	r24, 0x67	; 103
 372:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 37c:	86 e0       	ldi	r24, 0x06	; 6
 37e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 382:	08 95       	ret

00000384 <USART_putstring>:
}

void USART_putstring(char* StringPtr) {
 384:	fc 01       	movw	r30, r24
	while (*StringPtr != '\0') {
 386:	07 c0       	rjmp	.+14     	; 0x396 <USART_putstring+0x12>
		while (!(UCSR0A & (1 << UDRE0)));
 388:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 38c:	95 ff       	sbrs	r25, 5
 38e:	fc cf       	rjmp	.-8      	; 0x388 <USART_putstring+0x4>
		UDR0 = *StringPtr++;
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UCSR0B = (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_putstring(char* StringPtr) {
	while (*StringPtr != '\0') {
 396:	80 81       	ld	r24, Z
 398:	81 11       	cpse	r24, r1
 39a:	f6 cf       	rjmp	.-20     	; 0x388 <USART_putstring+0x4>
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = *StringPtr++;
	}
}
 39c:	08 95       	ret

0000039e <main>:

int main(void) {
	
	uart_init();
 39e:	0e 94 b6 01 	call	0x36c	; 0x36c <uart_init>
	USART_putstring("1. SPI & SD card initialize.\n\r");
 3a2:	83 e8       	ldi	r24, 0x83	; 131
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
	if (disk_initialize(0) != 0) {
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 b3 00 	call	0x166	; 0x166 <disk_initialize>
 3b0:	81 11       	cpse	r24, r1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <main+0x20>
		USART_putstring("  - SD card initialize failed.\n\n\r");
		return -1;
	}else {
		USART_putstring("  - SD card initialize success.\n\n\r");
 3b4:	84 ec       	ldi	r24, 0xC4	; 196
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <main+0x1e>
int main(void) {
	
	uart_init();
	USART_putstring("1. SPI & SD card initialize.\n\r");
	if (disk_initialize(0) != 0) {
		USART_putstring("  - SD card initialize failed.\n\n\r");
 3be:	82 ea       	ldi	r24, 0xA2	; 162
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 c2 01 	call	0x384	; 0x384 <USART_putstring>
	}else {
		USART_putstring("  - SD card initialize success.\n\n\r");
	}

    while (1);
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
